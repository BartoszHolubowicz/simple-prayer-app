// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum Reaction {
  LIKE
  HEART
  PRAYER_HANDS
  CRY
}

model Group {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  name             String          @db.VarChar(100)
  description      String?         @db.LongText
  shortDescription String?         @db.VarChar(255)
  code             String          @db.VarChar(6)
  password         String?         @db.VarChar(255)
  users            GroupUser[]
  messages         ChatMessage[]
  prayerRequests   PrayerRequest[]

  @@unique([code])
}

model GroupUser {
  id      String @id @default(cuid())
  groupId Int
  userId  Int
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    Role   @default(USER)

  @@unique([groupId, userId])
}

model ChatMessage {
  id        String                @id @default(cuid())
  createdAt DateTime              @default(now())
  groupId   Int
  userId    Int
  content   String                @db.LongText
  group     Group                 @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions ChatMessageReaction[]
}

model ChatMessageReaction {
  id            String      @id @default(cuid())
  chatMessageId String
  userId        Int
  reaction      Reaction
  message       ChatMessage @relation(fields: [chatMessageId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PrayerRequest {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  userId      Int
  groupId     Int
  name        String      @db.VarChar(100)
  description String?     @db.LongText
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  PrayerLog   PrayerLog[]
}

model PrayerLog {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  prayerRequestId String
  userId          Int
  prayerRequest   PrayerRequest @relation(fields: [prayerRequestId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   Int                   @id @default(autoincrement())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  groupUsers           GroupUser[]
  chatMessages         ChatMessage[]
  chatMessageReactions ChatMessageReaction[]
  prayerRequests       PrayerRequest[]
  PrayerLog            PrayerLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
